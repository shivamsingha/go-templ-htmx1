// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countResetTokensByUser = `-- name: CountResetTokensByUser :one
SELECT count(*)
FROM reset_tokens
WHERE user_id = $1
    AND expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) CountResetTokensByUser(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countResetTokensByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createResetToken = `-- name: CreateResetToken :exec
INSERT INTO reset_tokens(token, user_id)
VALUES ($1, $2)
`

type CreateResetTokenParams struct {
	Token  string
	UserID pgtype.UUID
}

func (q *Queries) CreateResetToken(ctx context.Context, arg CreateResetTokenParams) error {
	_, err := q.db.Exec(ctx, createResetToken, arg.Token, arg.UserID)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(email, name, password)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Email    string
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Email, arg.Name, arg.Password)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id,
    password,
    email_verified
FROM users
WHERE email = $1
LIMIT 1
`

type GetUserRow struct {
	ID            pgtype.UUID
	Password      string
	EmailVerified pgtype.Bool
}

func (q *Queries) GetUser(ctx context.Context, email string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Password, &i.EmailVerified)
	return i, err
}
