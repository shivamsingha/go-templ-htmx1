// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: reset_tokens.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countResetTokensByUser = `-- name: CountResetTokensByUser :one
SELECT count(*)
FROM reset_tokens
WHERE user_id = $1
    AND expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) CountResetTokensByUser(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countResetTokensByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createResetToken = `-- name: CreateResetToken :exec
INSERT INTO reset_tokens(token, user_id)
VALUES ($1, $2)
`

type CreateResetTokenParams struct {
	Token  string
	UserID pgtype.UUID
}

func (q *Queries) CreateResetToken(ctx context.Context, arg CreateResetTokenParams) error {
	_, err := q.db.Exec(ctx, createResetToken, arg.Token, arg.UserID)
	return err
}

const popResetToken = `-- name: PopResetToken :one
DELETE FROM reset_tokens
WHERE token = $1
RETURNING user_id, expires_at
`

type PopResetTokenRow struct {
	UserID    pgtype.UUID
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) PopResetToken(ctx context.Context, token string) (PopResetTokenRow, error) {
	row := q.db.QueryRow(ctx, popResetToken, token)
	var i PopResetTokenRow
	err := row.Scan(&i.UserID, &i.ExpiresAt)
	return i, err
}
